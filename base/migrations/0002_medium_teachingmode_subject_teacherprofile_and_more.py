# Generated by Django 5.2.1 on 2025-05-31 05:51

import base.models
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('base', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Medium',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='TeachingMode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='A brief description of the subject.', null=True)),
                ('subject_code', models.CharField(blank=True, help_text="A unique code for the subject (e.g., 'MATH101', 'PHY202')", max_length=20, null=True, unique=True)),
                ('grade', models.CharField(blank=True, help_text="Class or grade level for the subject (e.g., '10th Grade', '12th Grade')", max_length=50, null=True)),
                ('medium', models.ManyToManyField(blank=True, related_name='subjects', to='base.medium')),
            ],
        ),
        migrations.CreateModel(
            name='TeacherProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, help_text='A brief biography of the teacher.', null=True)),
                ('experience_years', models.PositiveIntegerField(default=0)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('any', 'Any')], max_length=20)),
                ('preferred_distance', models.PositiveIntegerField(default=0, help_text='Preferred distance for teaching in kilometers')),
                ('medium', models.ManyToManyField(blank=True, related_name='teacher_profiles', to='base.medium')),
                ('subject_list', models.ManyToManyField(blank=True, help_text='The subjects this tutor can teach.', related_name='tutors', to='base.subject')),
                ('teacher', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='teacher_profile', to=settings.AUTH_USER_MODEL)),
                ('teaching_mode', models.ManyToManyField(blank=True, related_name='teacher_profiles', to='base.teachingmode')),
            ],
        ),
        migrations.CreateModel(
            name='Qualification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organization', models.CharField(blank=True, max_length=255)),
                ('skill', models.CharField(blank=True, max_length=100)),
                ('year', models.PositiveIntegerField(blank=True, null=True)),
                ('results', models.TextField(blank=True, null=True)),
                ('certificates', models.FileField(blank=True, null=True, upload_to=base.models.certificate_upload_to)),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='qualifications', to='base.teacherprofile')),
            ],
        ),
        migrations.CreateModel(
            name='AcademicProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('institution', models.CharField(blank=True, max_length=255)),
                ('degree', models.CharField(blank=True, max_length=100)),
                ('graduation_year', models.PositiveIntegerField(blank=True, null=True)),
                ('results', models.TextField(blank=True)),
                ('certificates', models.FileField(blank=True, null=True, upload_to=base.models.certificate_upload_to)),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='academic_profile', to='base.teacherprofile')),
            ],
        ),
        migrations.CreateModel(
            name='Availability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.CharField(choices=[('MON', 'Monday'), ('TUE', 'Tuesday'), ('WED', 'Wednesday'), ('THU', 'Thursday'), ('FRI', 'Friday'), ('SAT', 'Saturday'), ('SUN', 'Sunday')], help_text='The day of the week for this availability slot.', max_length=3)),
                ('start_time', models.TimeField(help_text='The start time of the availability slot.')),
                ('end_time', models.TimeField(help_text='The end time of the availability slot.')),
                ('tutor', models.ForeignKey(help_text='The tutor associated with this availability slot.', on_delete=django.db.models.deletion.CASCADE, related_name='availabilities', to='base.teacherprofile')),
            ],
            options={
                'verbose_name': 'Availability Slot',
                'verbose_name_plural': 'Availability Slots',
                'ordering': ['tutor__teacher__username', 'day_of_week', 'start_time'],
                'unique_together': {('tutor', 'day_of_week', 'start_time', 'end_time')},
            },
        ),
    ]
